# Form implementation generated from reading ui file 'd:\PyQt6 Project\UI_test\UI0509.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QApplication,QMainWindow
from PyQt6.QtGui import QImage,QPixmap
from PyQt6.QtCore import Qt,QThread,pyqtSignal,QObject,QTimer
from PyQt6.QtCore import QEventLoop
import numpy as np
import ctypes
import sys
import os
import cv2
from time import sleep
import fcntl    #用于ioctl操作
#import main
from main import YOLOinit, YOLO_run

#定义电机和抽屉地址：
Addr_motor = 0x02
Addr_board = 0x01

#-------------------------------------这一块定义控制摄像头的电机移动线程模块-------------------------------------

class MotorThread(QThread):
    move_complete_signal = pyqtSignal(str)#电机移动完成信号
    
    def __init__(self,lib,fd):
        super().__init__()
        self.lib = lib
        self.fd_motor = fd
        self.current_task = None  #定义电机任务
        self.is_running = False #线程运行/停止标志位
        

    def run(self):
        self.is_running = True
        while self.is_running:
            if self.current_task:
                #根据当前任务执行相应操作（sleep操作内置于绝缘子装载板每一个执行函数之内，而摄像头电机的时间写在yolo线程里面，做完发出用于改变绝缘子装载板状态的完成信号）
                if self.current_task == "camera_move":
                    self.camera_move()
                elif self.current_task == "camera_back":
                    self.camera_back()
                elif self.current_task == "board_out":
                    self.board_out()
                elif self.current_task == "board_back":
                    self.board_back()
                
                 # 任务完成后发送信号并重置
                self.move_complete_signal.emit(self.current_task)
                self.current_task = None
            
            else:
                # 没有任务时短暂休眠
                sleep(0.1)

    def set_task(self, task_name):
        """主线程调用此方法设置新任务"""
        self.current_task = task_name

    

    def camera_move(self):
        self.lib.send_motor(self.fd_motor,Addr_motor,0x0001,0x0000)  #设置方向为反转
        sleep(1)
        self.lib.send_motor(self.fd_motor,Addr_motor,0x0004,0x00C8)  #设置转速为200r/min
        sleep(1)
        self.lib.send_motor(self.fd_motor,Addr_motor,0x0006,0x0016)  #设置圈数为 22 圈（16）
        sleep(1)
        self.lib.send_motor(self.fd_motor,Addr_motor,0x0002,0x0001)  #设置电机开始运行



    def camera_back(self):
        self.lib.send_motor(self.fd_motor,Addr_motor,0x0001,0x0001)  #设置方向为反转
        sleep(1)
        self.lib.send_motor(self.fd_motor,Addr_motor,0x0004,0x00C8)  #设置转速为200r/min
        sleep(1)
        self.lib.send_motor(self.fd_motor,Addr_motor,0x0006,0x0032)  #设置圈数为 50 圈（32）
        sleep(1)
        self.lib.send_motor(self.fd_motor,Addr_motor,0x0002,0x0001)  #设置电机开始运行


    #让绝缘子装载板移出:
    def board_out(self):
        self.lib.send_motor(self.fd_motor,Addr_board,0x0001,0x0000)  #设置方向为反转
        sleep(1)
        self.lib.send_motor(self.fd_motor,Addr_board,0x0004,0x00C8)  #设置转速为 200 r/min
        sleep(1)
        self.lib.send_motor(self.fd_motor,Addr_board,0x0006,0x001A)  #设置圈数为 26 圈（1A）
        sleep(1)
        self.lib.send_motor(self.fd_motor,Addr_board,0x0002,0x0001)  #设置电机开始运行
        sleep(12)


    #让绝缘子装载板移入：
    def board_back(self):
        self.lib.send_motor(self.fd_motor,Addr_board,0x0001,0x0001)  #设置方向为正转
        sleep(1)
        self.lib.send_motor(self.fd_motor,Addr_board,0x0004,0x00C8)  #设置转速为 200 r/min
        sleep(1)
        self.lib.send_motor(self.fd_motor,Addr_board,0x0006,0x0022)  #设置圈数为 34 圈（22）
        sleep(1)
        self.lib.send_motor(self.fd_motor,Addr_board,0x0002,0x0001)  #设置电机开始运行 
        sleep(12)

    def stop_thread(self):
        self.is_running = False
        self.wait()



#-------------------------------------这一块定义摄像头捕获线程模块-------------------------------------
class CameraThread(QThread):
    """独立的摄像头捕获线程"""
    frame_updated = pyqtSignal(int, QImage)  # 传递摄像头ID和图像数据,参数：摄像头ID，图像数据

    def __init__(self):
        super().__init__()
        self.running = False
        self.cameras = {}

    def run(self):
        self.running = True
        self.init_cameras()
        
        while self.running:
            for camera_id, cap in self.cameras.items():
                ret, frame = cap.read()
                if ret:
                    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                    h, w, ch = rgb_frame.shape
                    q_img = QImage(rgb_frame.data, w, h, w*ch, QImage.Format.Format_RGB888)
                    self.frame_updated.emit(camera_id, q_img)     #通过这个与主线程交互
            self.msleep(30)  # 控制帧率


    def init_cameras(self):
        """初始化双目摄像头"""
        for camera_id in [21,23]:
            cap = cv2.VideoCapture(camera_id)
            if cap.isOpened():
                self.cameras[camera_id] = cap
                #self.status_updated.emit(f"摄像头 {camera_id} 初始化成功")
            #else:
                #self.status_updated.emit(f"摄像头 {camera_id} 初始化失败")

    
    def stop(self):
        """停止线程并释放资源"""
        self.running = False
        for cap in self.cameras.values():
            if cap.isOpened():
                cap.release()
        self.cameras.clear()
        self.wait()
    


#-------------------------------------这一块定义YOLO线程模块-------------------------------------
class YOLOThread(QThread):
    # 定义信号:
    detection_started = pyqtSignal()
    detection_completed = pyqtSignal()
    status_updated = pyqtSignal(str)

    detection_image_signal = pyqtSignal(int,QImage)     #新增信号：传递图片索引（1/2/3）和 QImage 数据
    distance_signal = pyqtSignal(float)  #新增信号：爬电距离
    
    def __init__(self, motor_thread:MotorThread,camera_thread:CameraThread):
        super().__init__()
        self.motor_thread = motor_thread
        self.camera_thread = camera_thread
        self.running = False
        self.detection_count = 0 #检测次数计数器
        frames, cap_left, cap_right, map_lx, map_ly, map_rx, map_ry, pool = YOLOinit(self.camera_thread)
        self.frames = frames
        self.cap_left = cap_left
        self.cap_right = cap_left
        self.map_lx = map_lx
        self.map_ly = map_ly
        self.map_rx = map_rx
        self.map_ry = map_ry
        self.pool = pool
        
    def run(self):
        """YOLO检测主循环"""
        self.running = True

        self.detection_started.emit()


        # 步骤1: 第一次测量
        self.status_updated.emit("第一次测量中...")
        self.perform_detection()

        # 移动摄像头到下一个位置
        self.status_updated.emit("移动摄像头...")
        self.motor_thread.set_task("camera_move")
        sleep(8)  #这里要计算电机运动的时长，让yolo不进行检测，8s匹配22圈

        #步骤2：第二次测量
        self.status_updated.emit("第二次测量中...")
        self.perform_detection()

        # 移动摄像头到下一个位置
        self.status_updated.emit("移动摄像头...")
        self.motor_thread.set_task("camera_move")
        sleep(8)  #这里要计算电机运动的时长，让yolo不进行检测，8s匹配22圈

        #步骤3：第三次测量
        self.status_updated.emit("第三次测量中...")
        self.perform_detection()

        #摄像头复位
        self.status_updated.emit("摄像头复位中...")
        self.motor_thread.set_task("camera_back")
        sleep(17)  #这里要计算电机运动的时长，等待复位
        

        #停止摄像头捕获：
        self.capture_running = False
        self.stop_camera_capture()

        #完成检测
        self.status_updated.emit("检测完成！")
        self.detection_completed.emit()

        self.running = False


    def perform_detection(self):
        """执行实际的YOLO检测"""
        # 这里放置您的YOLO检测代码
        # 例如：处理图像、识别物体等

        self.detection_count += 1 #计数自增
        for i in range(10):
            distance, processed_image = YOLO_run(self.frames,
        self.cap_left,
        self.cap_right,
        self.map_lx,
        self.map_ly,
        self.map_rx,
        self.map_ry,
        self.pool)
        processed_image = QImage(processed_image.data, processed_image.shape[1], processed_image.shape[0], processed_image.shape[1] * 3, QImage.Format.Format_RGB888).rgbSwapped()
        # 获取检测结果图片（示例：假设从frames中获取处理后的图像）
        self.detection_image_signal.emit(self.detection_count,processed_image)
        self.distance_signal.emit(distance)
        self.status_updated.emit("检测完成")


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(862, 589)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.verticalLayout_17 = QtWidgets.QVBoxLayout()
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.label_10 = QtWidgets.QLabel(parent=self.centralwidget)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Window, brush)
        self.label_10.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(14)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("background-color:rgb(241, 229, 214)")
        self.label_10.setObjectName("label_10")
        self.verticalLayout_17.addWidget(self.label_10)
        self.line_5 = QtWidgets.QFrame(parent=self.centralwidget)
        self.line_5.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_5.setObjectName("line_5")
        self.verticalLayout_17.addWidget(self.line_5)
        self.firstverticallayout = QtWidgets.QVBoxLayout()
        self.firstverticallayout.setSpacing(15)
        self.firstverticallayout.setObjectName("firstverticallayout")
        self.label_11 = QtWidgets.QLabel(parent=self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Ignored, QtWidgets.QSizePolicy.Policy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_11.sizePolicy().hasHeightForWidth())
        self.label_11.setSizePolicy(sizePolicy)
        self.label_11.setStyleSheet("border-radius:30px")
        self.label_11.setText("")
        self.label_11.setTextFormat(QtCore.Qt.TextFormat.AutoText)
        self.label_11.setScaledContents(True)
        self.label_11.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_11.setObjectName("label_11")
        self.firstverticallayout.addWidget(self.label_11)
        self.line = QtWidgets.QFrame(parent=self.centralwidget)
        self.line.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line.setObjectName("line")
        self.firstverticallayout.addWidget(self.line)
        self.label_12 = QtWidgets.QLabel(parent=self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Ignored, QtWidgets.QSizePolicy.Policy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_12.sizePolicy().hasHeightForWidth())
        self.label_12.setSizePolicy(sizePolicy)
        self.label_12.setStyleSheet("border-radius:30px")
        self.label_12.setText("")
        self.label_12.setScaledContents(True)
        self.label_12.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_12.setObjectName("label_12")
        self.firstverticallayout.addWidget(self.label_12)
        self.verticalLayout_17.addLayout(self.firstverticallayout)
        self.line_2 = QtWidgets.QFrame(parent=self.centralwidget)
        self.line_2.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_2.setObjectName("line_2")
        self.verticalLayout_17.addWidget(self.line_2)
        self.label_7 = QtWidgets.QLabel(parent=self.centralwidget)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Window, brush)
        self.label_7.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(14)
        self.label_7.setFont(font)
        self.label_7.setStyleSheet("background-color:rgb(241, 229, 214)")
        self.label_7.setObjectName("label_7")
        self.verticalLayout_17.addWidget(self.label_7)
        self.line_4 = QtWidgets.QFrame(parent=self.centralwidget)
        self.line_4.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_4.setObjectName("line_4")
        self.verticalLayout_17.addWidget(self.line_4)
        self.zhuangtailan = QtWidgets.QPlainTextEdit(parent=self.centralwidget)
        self.zhuangtailan.setStyleSheet("border-radius:30px")
        self.zhuangtailan.setDocumentTitle("")
        self.zhuangtailan.setPlainText("")
        self.zhuangtailan.setObjectName("zhuangtailan")
        self.verticalLayout_17.addWidget(self.zhuangtailan)
        self.verticalLayout_17.setStretch(0, 1)
        self.verticalLayout_17.setStretch(2, 10)
        self.verticalLayout_17.setStretch(4, 1)
        self.verticalLayout_17.setStretch(6, 4)
        self.horizontalLayout_3.addLayout(self.verticalLayout_17)
        self.line_3 = QtWidgets.QFrame(parent=self.centralwidget)
        self.line_3.setFrameShape(QtWidgets.QFrame.Shape.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_3.setObjectName("line_3")
        self.horizontalLayout_3.addWidget(self.line_3)
        self.verticalLayout_16 = QtWidgets.QVBoxLayout()
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.label_9 = QtWidgets.QLabel(parent=self.centralwidget)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Window, brush)
        self.label_9.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(14)
        self.label_9.setFont(font)
        self.label_9.setStyleSheet("background-color:rgb(241, 229, 214)")
        self.label_9.setObjectName("label_9")
        self.verticalLayout_16.addWidget(self.label_9)
        self.line_6 = QtWidgets.QFrame(parent=self.centralwidget)
        self.line_6.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_6.setObjectName("line_6")
        self.verticalLayout_16.addWidget(self.line_6)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setStyleSheet("")
        self.label.setText("")
        self.label.setScaledContents(False)
        self.label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label.setWordWrap(False)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_2.addItem(spacerItem)
        self.label_2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_2.setStyleSheet("")
        self.label_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.label_2)
        self.verticalLayout_2.setStretch(0, 20)
        self.verticalLayout_2.setStretch(1, 1)
        self.verticalLayout_2.setStretch(2, 3)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        self.line_9 = QtWidgets.QFrame(parent=self.centralwidget)
        self.line_9.setFrameShape(QtWidgets.QFrame.Shape.VLine)
        self.line_9.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_9.setObjectName("line_9")
        self.horizontalLayout_2.addWidget(self.line_9)
        self.verticalLayout_11 = QtWidgets.QVBoxLayout()
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.label_25 = QtWidgets.QLabel(parent=self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_25.sizePolicy().hasHeightForWidth())
        self.label_25.setSizePolicy(sizePolicy)
        self.label_25.setStyleSheet("")
        self.label_25.setText("")
        self.label_25.setScaledContents(False)
        self.label_25.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_25.setObjectName("label_25")
        self.verticalLayout_11.addWidget(self.label_25)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_11.addItem(spacerItem1)
        self.label_26 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_26.setStyleSheet("")
        self.label_26.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_26.setObjectName("label_26")
        self.verticalLayout_11.addWidget(self.label_26)
        self.verticalLayout_11.setStretch(0, 20)
        self.verticalLayout_11.setStretch(1, 1)
        self.verticalLayout_11.setStretch(2, 3)
        self.horizontalLayout_2.addLayout(self.verticalLayout_11)
        self.line_10 = QtWidgets.QFrame(parent=self.centralwidget)
        self.line_10.setFrameShape(QtWidgets.QFrame.Shape.VLine)
        self.line_10.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_10.setObjectName("line_10")
        self.horizontalLayout_2.addWidget(self.line_10)
        self.verticalLayout_15 = QtWidgets.QVBoxLayout()
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.label_33 = QtWidgets.QLabel(parent=self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_33.sizePolicy().hasHeightForWidth())
        self.label_33.setSizePolicy(sizePolicy)
        self.label_33.setStyleSheet("")
        self.label_33.setText("")
        self.label_33.setScaledContents(False)
        self.label_33.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_33.setObjectName("label_33")
        self.verticalLayout_15.addWidget(self.label_33)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_15.addItem(spacerItem2)
        self.label_34 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_34.setStyleSheet("")
        self.label_34.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_34.setObjectName("label_34")
        self.verticalLayout_15.addWidget(self.label_34)
        self.verticalLayout_15.setStretch(0, 20)
        self.verticalLayout_15.setStretch(1, 1)
        self.verticalLayout_15.setStretch(2, 3)
        self.horizontalLayout_2.addLayout(self.verticalLayout_15)
        self.verticalLayout_16.addLayout(self.horizontalLayout_2)
        self.tableWidget = QtWidgets.QTableWidget(parent=self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tableWidget.sizePolicy().hasHeightForWidth())
        self.tableWidget.setSizePolicy(sizePolicy)
        self.tableWidget.setAutoFillBackground(False)
        self.tableWidget.setStyleSheet("")
        self.tableWidget.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.tableWidget.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.tableWidget.setAutoScrollMargin(16)
        self.tableWidget.setShowGrid(True)
        self.tableWidget.setGridStyle(QtCore.Qt.PenStyle.SolidLine)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(4)
        self.tableWidget.setRowCount(3)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.tableWidget.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.tableWidget.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        item.setFont(font)
        item.setBackground(QtGui.QColor(0, 85, 255))
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        item.setFont(font)
        item.setBackground(QtGui.QColor(0, 85, 255))
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        item.setFont(font)
        item.setBackground(QtGui.QColor(0, 85, 255))
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        item.setFont(font)
        item.setBackground(QtGui.QColor(0, 85, 255))
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        item.setFont(font)
        item.setFlags(QtCore.Qt.ItemFlag.ItemIsSelectable|QtCore.Qt.ItemFlag.ItemIsDragEnabled|QtCore.Qt.ItemFlag.ItemIsDropEnabled|QtCore.Qt.ItemFlag.ItemIsUserCheckable|QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.tableWidget.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.tableWidget.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.tableWidget.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.tableWidget.setItem(0, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        item.setFont(font)
        item.setFlags(QtCore.Qt.ItemFlag.ItemIsSelectable|QtCore.Qt.ItemFlag.ItemIsDragEnabled|QtCore.Qt.ItemFlag.ItemIsDropEnabled|QtCore.Qt.ItemFlag.ItemIsUserCheckable|QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.tableWidget.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.tableWidget.setItem(1, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.tableWidget.setItem(1, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.tableWidget.setItem(1, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        item.setFont(font)
        item.setFlags(QtCore.Qt.ItemFlag.ItemIsSelectable|QtCore.Qt.ItemFlag.ItemIsDragEnabled|QtCore.Qt.ItemFlag.ItemIsDropEnabled|QtCore.Qt.ItemFlag.ItemIsUserCheckable|QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.tableWidget.setItem(2, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.tableWidget.setItem(2, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.tableWidget.setItem(2, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.tableWidget.setItem(2, 3, item)
        self.tableWidget.horizontalHeader().setVisible(True)
        self.tableWidget.horizontalHeader().setCascadingSectionResizes(False)
        self.tableWidget.horizontalHeader().setDefaultSectionSize(200)
        self.tableWidget.horizontalHeader().setHighlightSections(True)
        self.tableWidget.horizontalHeader().setMinimumSectionSize(24)
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.tableWidget.verticalHeader().setVisible(False)
        self.tableWidget.verticalHeader().setCascadingSectionResizes(False)
        self.tableWidget.verticalHeader().setDefaultSectionSize(65)
        self.tableWidget.verticalHeader().setHighlightSections(True)
        self.tableWidget.verticalHeader().setStretchLastSection(True)
        self.verticalLayout_16.addWidget(self.tableWidget)
        self.verticalLayout_16.setStretch(0, 1)
        self.verticalLayout_16.setStretch(2, 10)
        self.horizontalLayout_3.addLayout(self.verticalLayout_16)
        self.line_8 = QtWidgets.QFrame(parent=self.centralwidget)
        self.line_8.setFrameShape(QtWidgets.QFrame.Shape.VLine)
        self.line_8.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_8.setObjectName("line_8")
        self.horizontalLayout_3.addWidget(self.line_8)
        self.splitter = QtWidgets.QSplitter(parent=self.centralwidget)
        self.splitter.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.splitter.setObjectName("splitter")
        self.label_8 = QtWidgets.QLabel(parent=self.splitter)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(241, 229, 214))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Window, brush)
        self.label_8.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(14)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("background-color:rgb(241, 229, 214)")
        self.label_8.setObjectName("label_8")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(parent=self.splitter)
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(60)
        self.verticalLayout.setObjectName("verticalLayout")
        self.line_7 = QtWidgets.QFrame(parent=self.verticalLayoutWidget_2)
        self.line_7.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line_7.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_7.setObjectName("line_7")
        self.verticalLayout.addWidget(self.line_7)
        self.pushButton_2 = QtWidgets.QPushButton(parent=self.verticalLayoutWidget_2)
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout.addWidget(self.pushButton_2)
        self.pushButton = QtWidgets.QPushButton(parent=self.verticalLayoutWidget_2)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        self.pushButton_3 = QtWidgets.QPushButton(parent=self.verticalLayoutWidget_2)
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout.addWidget(self.pushButton_3)
        self.pushButton_4 = QtWidgets.QPushButton(parent=self.verticalLayoutWidget_2)
        self.pushButton_4.setObjectName("pushButton_4")
        self.verticalLayout.addWidget(self.pushButton_4)
        self.pushButton_5 = QtWidgets.QPushButton(parent=self.verticalLayoutWidget_2)
        self.pushButton_5.setObjectName("pushButton_5")
        self.verticalLayout.addWidget(self.pushButton_5)
        self.verticalLayout.setStretch(1, 10)
        self.verticalLayout.setStretch(2, 10)
        self.verticalLayout.setStretch(3, 10)
        self.verticalLayout.setStretch(4, 10)
        self.verticalLayout.setStretch(5, 10)
        self.horizontalLayout_3.addWidget(self.splitter)
        self.horizontalLayout_3.setStretch(0, 5)
        self.horizontalLayout_3.setStretch(2, 15)
        self.horizontalLayout_3.setStretch(4, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 862, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_10.setText(_translate("MainWindow", "●过程监控（双目）"))
        self.label_7.setText(_translate("MainWindow", "●运行信息"))
        self.label_9.setText(_translate("MainWindow", "●检测结果"))
        self.label_2.setText(_translate("MainWindow", "1#绝缘子待检测"))
        self.label_26.setText(_translate("MainWindow", "2#绝缘子待检测"))
        self.label_34.setText(_translate("MainWindow", "3#绝缘子待检测"))
        self.tableWidget.setSortingEnabled(False)
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "绝缘子编号"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "爬电距离(mm)"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "爬电比距(mm/kV)"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "爬电等级判定"))
        __sortingEnabled = self.tableWidget.isSortingEnabled()
        self.tableWidget.setSortingEnabled(False)
        item = self.tableWidget.item(0, 0)
        item.setText(_translate("MainWindow", "1#"))
        item = self.tableWidget.item(1, 0)
        item.setText(_translate("MainWindow", "2#"))
        item = self.tableWidget.item(2, 0)
        item.setText(_translate("MainWindow", "3#"))
        self.tableWidget.setSortingEnabled(__sortingEnabled)
        self.label_8.setText(_translate("MainWindow", "●机器控制"))
        self.pushButton_2.setText(_translate("MainWindow", "开始检测"))
        self.pushButton.setText(_translate("MainWindow", "开启LED"))
        self.pushButton_3.setText(_translate("MainWindow", "装载绝缘子"))
        self.pushButton_4.setText(_translate("MainWindow", "复位"))
        self.pushButton_5.setText(_translate("MainWindow", "保存"))

class MainWindow(QMainWindow,Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        
        # 创建摄像头ID到标签的映射字典
        self.camera_labels = {
            21: self.label_11,  # 假设摄像头21对应label_11
            23: self.label_12   # 假设摄像头23对应label_12
        }


        """ 应用启动时初始化LED设备 """
        #self.pushButton.clicked.connect(self.switch_led)
        self.fd_led = -1 #led设备文件描述符
        self.LED_IOC_MAGIC = ord('k')  # 对应内核的 'k'
        self.SET_LED_ON = (self.LED_IOC_MAGIC << 8) | 0   # 对应 _IO(LED_IOC_MAGIC, 0)            需改动
        self.SET_LED_OFF = (self.LED_IOC_MAGIC << 8) | 1  # 对应 _IO(LED_IOC_MAGIC, 1)             需改动
        try:
            # 注意：需要root权限或配置udev规则！
            self.fd_led = os.open("/dev/my_device", os.O_RDWR)
            print(f"[LED] 设备已打开,fd={self.fd_led}")
            
            # 初始化为关灯状态
            fcntl.ioctl(self.fd_led, self.SET_LED_OFF, 0)
        except OSError as e:
            print(f"[ERROR] 打开LED设备失败:{str(e)}")
            self.pushButton.setEnabled(False)
            self.pushButton.setText("设备异常")


        """ 应用启动时初始化电机设备 """
        #电机C语言动态库部分：
        self.lib = ctypes.CDLL('./libSendMotor.so')
        self.fd_motor = -1  #电机设备文件描述符
        # 设置 send_motor 函数的参数类型
        self.lib.send_motor.argtypes = [ctypes.c_int, ctypes.c_uint8, ctypes.c_uint16, ctypes.c_uint16]  # 新增 uint8
        # 设置 send_motor 返回类型
        self.lib.send_motor.restype = ctypes.c_int
        # 设置 init_port 函数的参数类型
        self.lib.init_port.argtypes = [ctypes.c_int]
        # 设置 init_port 返回类型
        self.lib.init_port.restype = ctypes.c_int
        self.fd_motor = os.open("/dev/ttyS9", os.O_RDWR | os.O_NOCTTY)#打开电机的文件描述符
        if(self.fd_motor < 0):
            print("open port error!!!!!")
        self.lib.init_port(self.fd_motor)

        """ 所有线程初始化定义 """
        # 创建并启动电机线程:
        self.motor_thread = MotorThread(self.lib, self.fd_motor)
        self.motor_thread.start()
        #创建摄像头线程：
        self.camera_thread = CameraThread()
        self.camera_thread.start()
        #创建YOLO线程：
        self.yolo_thread = YOLOThread(self.motor_thread,self.camera_thread.cameras)    #self.camera_thread.cameras,这里要改


        """ 所有信号与槽连接函数连接定义 """
        #开始测量信号与槽连接：
        self.pushButton_2.clicked.connect(self.start_detection)
        #绝缘子装载板进出的信号与槽连接定义：
        self.pushButton_3.clicked.connect(self.switch_board)    #装载绝缘子按钮
        #电机线程信号与槽连接定义：
        self.motor_thread.move_complete_signal.connect(self.on_motor_task_complete) #电机运行结束后发布信号
        #Yolo线程信号与槽连接定义：
        self.yolo_thread.detection_started.connect(self.on_detection_started)
        self.yolo_thread.detection_completed.connect(self.on_detection_completed)
        self.yolo_thread.status_updated.connect(self.update_status)
        self.yolo_thread.detection_image_signal.connect(self.update_detection_display)  #显示绝缘子图形
        # 连接双目摄像头帧  更新信号:
        self.camera_thread.frame_updated.connect(self.update_camera_display)
        

    #用setpixmap的方法更新绝缘子图像：
    def update_detection_display(self, count: int, image: QImage):
        """更新检测结果显示"""
        # 映射检测次数到对应的标签
        label_map = {
            1: self.label,     # 第一次检测结果
            2: self.label_25,  # 第二次检测结果
            3: self.label_33   # 第三次检测结果
        }
        
        if count in label_map:
            target_label = label_map[count]
            
        # 自适应缩放图像到标签尺寸（保持纵横比，平滑缩放）
        scaled_pixmap = QPixmap.fromImage(image).scaled(
        target_label.size(),
        Qt.AspectRatioMode.KeepAspectRatio,
        Qt.TransformationMode.SmoothTransformation
    )
        target_label.setPixmap(scaled_pixmap)
        target_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)  # 居中显示


        
    #用setpixmap的方法更新摄像头图像：
    def update_camera_display(self, camera_id, q_img):
        """更新摄像头显示"""
        if camera_id in self.camera_labels:
            # 缩放图像以适应标签大小
            scaled_img = q_img.scaled(
            self.camera_labels[camera_id].size(),
            QtCore.Qt.AspectRatioMode.KeepAspectRatio,
            QtCore.Qt.TransformationMode.SmoothTransformation
        )
            self.camera_labels[camera_id].setPixmap(QPixmap.fromImage(scaled_img))


    def start_detection(self):
        """开始测量按钮点击事件(开启yolo线程与摄像头线程)"""
        self.yolo_thread.detection_count = 0

        self.zhuangtailan.clear()           #开始新一次测量时清空状态栏
        if not self.camera_thread.isRunning():
            self.camera_thread.start()
        if not self.yolo_thread.isRunning():
            self.yolo_thread.start()


    def on_detection_started(self):
        """检测开始时更新UI"""
        self.pushButton_2.setEnabled(False)
        self.pushButton_2.setText("检测中...")


    def on_detection_completed(self):
        """检测完成时更新UI并关闭Yolo线程"""
        #清空绝缘子图片：
        self.label.clear()
        self.label_25.clear()
        self.label_33.clear()    
        self.yolo_thread.wait()     #停下yolo线程
        #清空摄像头显示：
        for label in self.camera_labels.values():
            label.clear()
        self.pushButton_2.setEnabled(True)
        self.pushButton_2.setText("开始测量")


    def update_status(self, message):      #emit过来的信息会被当作message接受
        """更新状态信息"""
        self.zhuangtailan.appendPlainText(message)



    def switch_board(self):
        """切换抽屉状态"""
        if self.pushButton_3.text() == "装载绝缘子":
            # 请求移出抽屉
            self.motor_thread.set_task("board_out")
            self.pushButton_2.setEnabled(False)  #禁用测量按钮
            self.pushButton_3.setEnabled(False)
            self.pushButton_3.setText("操作中...")
        else:
            # 请求收回抽屉
            self.motor_thread.set_task("board_back")
            self.pushButton_2.setEnabled(False) #禁用测量按钮
            self.pushButton_3.setEnabled(False)
            self.pushButton_3.setText("操作中...")

    def on_motor_task_complete(self,task_name):
        """电机任务完成时的处理"""
        if task_name == "board_out":
            # 抽屉移出完成
            self.pushButton_3.setText("卸载绝缘子")
            self.pushButton_3.setEnabled(True)  #恢复按钮功能
            self.pushButton_2.setEnabled(True)  #恢复测量按钮功能
        
        elif task_name == "board_back":
            # 抽屉收回完成
            self.pushButton_3.setText("装载绝缘子")
            self.pushButton_3.setEnabled(True)  #恢复按钮功能
            self.pushButton_2.setEnabled(True)  #恢复测量按钮功能






    def closeEvent(self, event):
        """窗口关闭时停止线程"""
        if self.camera_thread.isRunning():
            self.camera_thread.terminate()
            self.camera_thread.wait()
        # 停止YOLO线程
        if self.yolo_thread.isRunning():
            self.yolo_thread.terminate()
            self.yolo_thread.wait()

        #停止电机线程：
        self.motor_thread.running = False
        self.motor_thread.wait()

        #关闭硬件资源：
        os.close(self.fd_motor)

        event.accept()




if __name__ == '__main__':
    app = QApplication(sys.argv)

    ui = MainWindow()

    ui.show()

    sys.exit(app.exec())
